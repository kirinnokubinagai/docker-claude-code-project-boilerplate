#!/bin/bash

# チーム構造設定ファイル
# Master + 動的なチーム数とメンバー数で柔軟な大規模チーム管理

# チーム定義（動的に読み込み）
load_active_teams() {
    if [ -f "$TEAMS_CONFIG_FILE" ]; then
        # アクティブなチームのIDを配列に読み込む
        TEAMS=($(jq -r '.teams[] | select(.active == true) | .id' "$TEAMS_CONFIG_FILE" 2>/dev/null))
    else
        # デフォルトチーム
        TEAMS=()
    fi
}

# 初期化時にチームを読み込む
load_active_teams

# 各チームのメンバー役割
TEAM_ROLES=(
    "boss"      # チームリーダー（Masterと直接やり取り）
    "pro1"      # プロフェッショナル1
    "pro2"      # プロフェッショナル2
    "pro3"      # プロフェッショナル3
)

# チームメンバーの責任
get_member_responsibility() {
    local team="$1"
    local role="$2"
    
    case "$role" in
        "boss")
            echo "チームリーダー - Masterからの指示を受け、タスクを分配し、進捗を管理"
            ;;
        "pro1")
            echo "プロフェッショナル1 - 専門的なタスクを自律的に遂行、チーム全体に貢献"
            ;;
        "pro2")
            echo "プロフェッショナル2 - 専門的なタスクを自律的に遂行、チーム全体に貢献"
            ;;
        "pro3")
            echo "プロフェッショナル3 - 専門的なタスクを自律的に遂行、チーム全体に貢献"
            ;;
    esac
}

# チームウィンドウ名を取得
get_team_window_name() {
    local team="$1"
    case "$team" in
        "frontend") echo "Team-Frontend" ;;
        "backend") echo "Team-Backend" ;;
        "database") echo "Team-Database" ;;
        "devops") echo "Team-DevOps" ;;
        "qa-security") echo "Team-QA-Security" ;;
        *) echo "Team-$team" ;;
    esac
}

# メンバーのペイン名を取得
get_member_pane_name() {
    local team="$1"
    local role="$2"
    local team_cap=""
    local role_cap=""
    
    # チーム名を大文字化
    case "$team" in
        "frontend") team_cap="Frontend" ;;
        "backend") team_cap="Backend" ;;
        "database") team_cap="Database" ;;
        "devops") team_cap="DevOps" ;;
        "qa-security") team_cap="QA-Security" ;;
        *) team_cap="$team" ;;
    esac
    
    # ロール名を大文字化
    case "$role" in
        "boss") role_cap="Boss" ;;
        "pro1") role_cap="Pro1" ;;
        "pro2") role_cap="Pro2" ;;
        "pro3") role_cap="Pro3" ;;
        *) role_cap="$role" ;;
    esac
    
    echo "${team_cap}-${role_cap}"
}

# チーム別の技術スタック
get_team_tech_stack() {
    local team="$1"
    case "$team" in
        "frontend")
            echo "Next.js, React, TypeScript, Tailwind CSS, Playwright"
            ;;
        "backend")
            echo "Node.js, Express, Supabase, Edge Functions, Redis"
            ;;
        "database")
            echo "PostgreSQL, Prisma, Redis, pgvector, Migrations"
            ;;
        "devops")
            echo "Docker, GitHub Actions, Vercel, Monitoring, Security"
            ;;
        "qa-security")
            echo "Playwright, Jest, OWASP ZAP, Lighthouse, Penetration Testing"
            ;;
    esac
}

# タスク配分の優先度
get_task_priority() {
    local role="$1"
    case "$role" in
        "boss")
            echo "計画・設計・レビュー・進捗管理・チーム調整"
            ;;
        "pro1")
            echo "専門分野のタスク・アーキテクチャ設計・技術的意思決定・品質保証"
            ;;
        "pro2")
            echo "専門分野のタスク・機能実装・パフォーマンス最適化・技術調査"
            ;;
        "pro3")
            echo "専門分野のタスク・セキュリティ対策・テスト戦略・ドキュメント作成"
            ;;
    esac
}