FROM node:alpine

# パッケージリポジトリを更新
RUN apk update

# 基本パッケージをインストール
RUN apk add --no-cache \
    bash \
    bash-completion \
    git \
    curl \
    coreutils \
    sudo \
    musl-locales \
    musl-locales-lang

# 開発ツールをインストール
RUN apk add --no-cache \
    fzf \
    tmux \
    jq \
    perl \
    gettext \
    ncurses \
    vim \
    lsof

# Python関連をインストール（分離してネットワーク問題を回避）
RUN apk add --no-cache \
    python3 \
    py3-pip

# Node.js関連をインストール
RUN apk add --no-cache \
    nodejs \
    npm \
    pnpm

# フォント関連のみインストール（PDF生成等に必要）
RUN apk add --no-cache \
    ca-certificates \
    ttf-freefont

# pecoのインストール（Go製のインタラクティブフィルタ）
RUN curl -L https://github.com/peco/peco/releases/download/v0.5.11/peco_linux_amd64.tar.gz | tar xz \
    && mv peco_linux_amd64/peco /usr/local/bin/ \
    && rm -rf peco_linux_amd64

# developerユーザーを作成（既存のGID/UIDを考慮）
RUN addgroup -g 1001 developer || true && \
    adduser -D -u 1001 -G developer -s /bin/bash -h /home/developer developer && \
    echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# developerユーザーの環境ディレクトリを作成
RUN mkdir -p /home/developer/.config \
    /home/developer/.npm \
    /home/developer/.local/share \
    /home/developer/.cache \
    && chown -R developer:developer /home/developer

# zのインストール（bash用のディレクトリジャンプツール）
RUN curl -sSL https://raw.githubusercontent.com/rupa/z/master/z.sh -o /usr/local/bin/z.sh \
    && chmod +x /usr/local/bin/z.sh \
    && mkdir -p /home/developer/.local/share \
    && mkdir -p /home/developer/.z_data \
    && chown developer:developer /home/developer/.z_data

# tmux-xpanesのインストール
RUN curl -L https://raw.githubusercontent.com/greymd/tmux-xpanes/master/bin/xpanes -o /usr/local/bin/xpanes \
    && chmod +x /usr/local/bin/xpanes

# Docker CLIとDocker Composeのインストール（コンテナ内からホストのDockerを操作するため）
RUN apk add --no-cache docker-cli docker-cli-compose

# GitHub CLIのインストール
RUN apk add --no-cache github-cli

# pnpmのグローバルディレクトリを設定
ENV PNPM_HOME=/usr/local/share/pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN mkdir -p $PNPM_HOME \
    && pnpm config set global-bin-dir $PNPM_HOME \
    && pnpm config set global-dir $PNPM_HOME \
    && pnpm config set store-dir $PNPM_HOME/.pnpm-store

# Claude Codeをインストール（ビルドスクリプトを許可）
RUN pnpm config set enable-pre-post-scripts true && \
    echo "@anthropic-ai/claude-code" | pnpm approve-builds -g && \
    pnpm install -g @anthropic-ai/claude-code

# Playwright MCPサーバーをインストール
RUN npm install -g @playwright/mcp@latest

# Pythonベースのツールもインストール（--break-system-packagesフラグを使用）
RUN pip3 install --break-system-packages uv

# developerユーザーの環境設定
USER developer
WORKDIR /home/developer

# developerユーザーとして続行
USER developer

# gitの初期設定
RUN git config --global user.name "Developer" && \
    git config --global user.email "developer@claude-teams.local" && \
    git config --global init.defaultBranch main && \
    git config --global safe.directory /workspace


# rootに戻る（entrypointのため）
USER root

# ホームディレクトリの権限を設定
RUN chown -R developer:developer /home/developer

# envsubstツールを追加（環境変数展開用）
RUN apk add --no-cache gettext

# luaをインストール（z.shの代わりにz.luaを使う場合）
RUN apk add --no-cache lua5.3

# ロケール環境変数を設定
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# 環境変数はdocker-entrypoint.shで設定する（developerユーザーで実行するため）

# entrypointスクリプトを/opt/systemにコピー（ルートディレクトリを汚染しない）
RUN mkdir -p /opt/system
COPY docker-entrypoint.sh /opt/system/docker-entrypoint.sh
RUN chmod +x /opt/system/docker-entrypoint.sh

# システム設定ディレクトリを作成
RUN mkdir -p /opt/claude-system

# Bash設定ファイルをコピー
COPY docker-base/bash/.bashrc /home/developer/.bashrc
COPY docker-base/bash/.bash_profile /home/developer/.bash_profile
RUN chown developer:developer /home/developer/.bashrc /home/developer/.bash_profile

# 作業ディレクトリを設定
WORKDIR /workspace

# entrypointを設定（rootで実行してからdeveloperに切り替える）
ENTRYPOINT ["/opt/system/docker-entrypoint.sh"]
# デフォルトコマンドは設定しない（docker-entrypoint.shで制御）
